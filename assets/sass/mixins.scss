// =============================================================================
// Mixins & Functions
// =============================================================================

//STRING REPLACE
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

//FONT FACE
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

//BACKGROUND-IMAGE usage - @include background-size(cover)
@mixin background-size($type) {
  -webkit-background-size: $type;
     -moz-background-size: $type;
      -ms-background-size: $type;
          background-size: $type;
}

//BORDER-RADIUS  Usage - @include border-radius(10px)
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

//BOX-SHADOW   Usage - @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999)
@mixin box-shadow($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}


//TRANSITIONS  Usage - @include transition(color .3s ease delay)
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

//TEXT SHADOW  Usage - @include text-shadow(3px, 3px, 3px, #333)
@mixin text-shadow( $top, $left, $blur, $colour) {
  -webkit-text-shadow:$top $left $blur $colour;
  -moz-text-shadow:$top $left $blur $colour;
  -o-text-shadow:$top $left $blur $colour;
  text-shadow:$top $left $blur $colour;
}

//LINEAR-GRADIENT  Usage - background-image: linear-gradient(red, blue);/ @include linear-gradient(red, blue)
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

//CLEAR-FIX   Usage - @extend %clearfix;
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

//TRANSFORM, ANIMATIONS

//ROTATE   Usage  - @include rotate(45deg)
@mixin rotate($val) {
  -webkit-transform: rotate($val);
  -moz-transform: rotate($val);
  -ms-transform: rotate($val);
  -o-transform: rotate($val);
  transform: rotate($val);
}

//TRANSFORM-ORIGIN    Usage - @include transform-origin(x-axis y-axis z-axis)
@mixin transform-origin($val) {
  -webkit-transform-origin: $val;
  -moz-transform-origin: $val;
  -ms-transform-origin: $val;
  transform-origin: $val;
}

//TRANSFORM-STYLE    Usage  -  @include transform-style(flat|preserve-3d|initial|inherit)
@mixin transform-style($val) {
  -webkit-transform-style: $val;
  -moz-transform-style: $val;
  -ms-transform-style: $val;
  transform-style: $val;
}

//PERSPECTIVE  Usage  -  @include perspective(500px)
@mixin perspective($val) {
  -webkit-perspective: $val;
  -moz-perspective: $val;
  -ms-perspective: $val;
  perspective: $val;
}

//PERSPECTIVE-ORIGIN   Usage  -   @include perspective-origin(10% 10%)
@mixin perspective-origin($val){
  -webkit-perspective-origin: $val;
  -moz-perspective-origin: $val;
  -ms-perspective-origin: $val;
  perspective-origin: $val;
}

//FONTS
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}
